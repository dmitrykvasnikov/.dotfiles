Info about types:
     * in node itself with additional field/attributes
     * in special table
     * in new tree structure

Lexer:
    keep positions: start - start of lexem, current - current reading position, line - current line
    match metod - return true and consume char - to check for 2-char tokens after first char scan
    peek and peekNext - return current and next char without consuming it
    advance - consume current char and move position
    isEOF - true if we reach end of file

'And' / 'Or' binary operations are shor-circute

Expression produce a value, Statement produce an effect

Attach scope to code blocks?

Fucntion call has arguments, function declaration has parameter

Reporting Errors - probably return to list or Error in state

Parser:
    must take into consideration precedence and associativity

Precedence levels:
           expression
           equality
           comparison
           term
           factor
           unary
           primary

unary :: ("!"|"-") unary | primary

An idea of object - which will be attached to Token  and then reattached to Expression
On token-generation stage objects are literals, identifiers and syntax values (literally parts of input string), and during parsing we add more objects to AST
Or may be generate objects on parsing stage only
